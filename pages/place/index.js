import React, { Fragment, useState } from 'react'
import Head from 'next/head'
import Header from '../components/Header'
import clientPromise from '../../lib/mongodb';
import jwt from 'jsonwebtoken'
import { getCookie } from 'cookies-next'
import Section from '../components/Section';
import Footer from '../components/Footer';
import { VscSearch } from "react-icons/vsc";
import { set } from 'mongoose';
import 'animate.css'


const Place = ({ isSignin, user, placeData }) => {
  const userParse = JSON.parse(user);
  const place = JSON.parse(placeData)

  const [placeList, setPlaceList] = useState(place);
  const [text, setText] = useState('');

  const [namePlace, setNamePlace] = useState('');
  const [suggestion, setSuggestion] = useState([])

  const onChangeHandle = (text) => {
    let matches = []
    if (text.length > 0) {
      matches = place.filter(pla => {
        const regex = new RegExp(`${text}`, "gi");
        if (!pla.name.match(regex))
          return pla.country.match(regex)
        return pla.name.match(regex)
      })
      console.log('matches', matches)
      setPlaceList(matches)
      setSuggestion(matches)
    } else if (text.length === 0) {
      setPlaceList(place)
    }
  }

  const handleFavoritePlace = () => {
    let matches = []
    console.log("onClick favorite")
    for (let i = 0; i < place.length; i++) {
      console.log("place", place[i])
      for (let j = 0; j < place[i].favoriteuser.length; j++) {
        if (place[i].favoriteuser[j] === userParse.email) {
          matches.push(place[i])
          break;
        }
      }
    }
    if (matches.length !== 0) {
      setPlaceList(matches)
    } else {
      console.log("Khong co dia diem yeu thich")
    }
  }

  const handleTopPlace = () => {
    let matches = [];
    for (let i = 0; i < place.length; i++) {
      if(place[i].rating >= 4) {
        matches.push(place[i])
      }
    }
    if(matches.length != 0) {
      setPlaceList(matches)
    } else {
      confirm("Hiện tại không có địa điểm đạt top!!!")
    }
  }

  return (
    <Fragment>
      <Head>
        <title>K Travel - Place</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>

      <Header isSignin={isSignin} avatar={userParse.avatar} />
      <div className="h-80 w-screen relative flex flex-col justify-center items-center "
      // style={{
      //   backgroundImage: 'url(/2774351.jpg)',
      //   backgroundPosition: 'center',
      //   backgroundSize: 'cover',
      // }}
      >


        <video
          className="object-cover h-full w-full absolute "
          autoPlay
          loop
          muted
        >
          <source
            // src="https://nft4charity-assets.s3.us-east-2.amazonaws.com/hero-video.mp4"
            src="video.mp4"
            type="video/mp4"
          />
          Your browser does not support the video tag.
        </video>
      </div>
      <main className=''>

        {/* Search bar place */}
        <div>

        </div>
        <div className='px-5 flex flex-row justify-center items-start '>
          {/* Search */}
          <div className='z-10 flex flex-col justify-start items-start mr-10 mt-10 px-8 rounded-2xl border-2 border-gray-500 h-full'>
            <p className='mt-10 text-2xl font-bold mb-5'>Find your Place</p>
            {/* <div className='border-b-2 text-black relative'>
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                <input type='text'
                  onChange={e => onChangeHandle(e.target.value)}
                  placeholder="Search Place"
                  className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
                />
              </div>
            </div> */}
            <div className="flex items-center">
              <label for="simple-search" className="sr-only">Search</label>
              <div className="relative w-full">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <svg aria-hidden="true" className="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                </div>
                <input onChange={e => onChangeHandle(e.target.value)} type="text" id="simple-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search Place" required />
              </div>
              {/* <button type="submit" class="p-2.5 ml-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                <span class="sr-only">Search</span>
              </button> */}
            </div>

            <div onClick={() => {
              setPlaceList(place)
            }}
              className="m-4/5 rounded-2xl  bg-sky-400 my-5 px-8 py-2 text-white font-bold transition-transform duration-200 hover:scale-x-110 cursor-pointer"
            >
              Get All Place
            </div>

            <div onClick={handleFavoritePlace}
              className=" m-4/5 rounded-2xl  bg-sky-400 mb-5 px-8 py-2 text-white font-bold transition-transform duration-200 hover:scale-x-110 cursor-pointer"
            >
              Favorite Place
            </div>

            <div onClick={handleTopPlace}
              className="m-4/5 rounded-2xl bg-sky-400 mb-5 px-8 py-2 text-white font-bold transition-transform duration-200 hover:scale-x-110 cursor-pointer "
            >
              Top Place
            </div>

            {/* <span><VscSearch /></span><input type={'text'} placeholder="Type a place" /> */}
          </div>

          <div className=' h-screen w-3/4 overflow-y-hidden overflow-y-scroll'>
            <Section name="" data={placeList} email={userParse.email} />
          </div>
        </div>
      </main>
      <Footer />
    </Fragment>
  )
}

export default Place


export async function getServerSideProps(context) {
  const req = context.req
  const res = context.res

  const client = await clientPromise
  const db = client.db('travel-to-share')

  const token = getCookie('KDV', { req, res })
  let isSignin = false


  if (token) {
    let decode = jwt.verify(token, process.env.JWT_SECRET_KEY);
    const email = decode.email

    const users = await db.collection('User').find({ email: email }).toArray()
    const user = JSON.stringify(users[0])
    console.log("[user]", user)
    isSignin = true

    const place = await db.collection('Place').find().toArray();
    const placeData = JSON.stringify(place)

    return {
      props: { isSignin, user, placeData }, // will be passed to the page component as props
    }
  }


  return {
    props: {
      isSignin
    }
  }



}