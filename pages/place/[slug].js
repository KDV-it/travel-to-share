import React, { Fragment, useEffect, useRef, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router';
import clientPromise from '../../lib/mongodb';
import Header from '../components/Header';
import { getCookie } from 'cookies-next'
import jwt from 'jsonwebtoken'
import Footer from '../components/Footer';
import axios from 'axios';
import Link from 'next/link'
import WeatherCard from '../components/WeatherCard';
import { WiHumidity, WiSunrise, WiSunset } from "react-icons/wi";
import mapboxgl from 'mapbox-gl';
import { Textarea } from 'flowbite-react';
import CardReviews from '../components/CardReviews';
import AllReviewsCard from '../components/AllReviewsCard'
import { BsFillStarFill } from "react-icons/bs";
import 'animate.css';
// import MapExample from '../components/SimpleMap';

// for tesst map
import Map from '../components/Map'

const Detail = ({
  images,
  isSignin,
  user,
  avartarPlace,
  name,
  country,
  description,
  lon,
  lat,
  slug,
  reviewsData,
  rating,
  AllReviewsData
}
) => {
  let avatar = '/avatarStandard.jpg'

  const router = useRouter();
  const [weather, setWeather] = useState([]);
  const [weatherCurrent, setweatherCurrent] = useState({})
  const [lonP, setLonP] = useState(JSON.parse(lon))
  const [latP, setLatP] = useState(JSON.parse(lat))
  const [temp, setTemp] = useState();
  const [comment, setComment] = useState("");

  const urlWeatherCurrent = `https://api.openweathermap.org/data/2.5/weather?lat=${latP}&lon=${lonP}&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`
  const urlWeather = `https://api.openweathermap.org/data/2.5/forecast/?lat=${latP}&lon=${lonP}&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`

  useEffect(() => {
    console.log("Url Weather", urlWeather)
    axios(urlWeather).then((response) => {
      const data = response.data.list
      setWeather(data)
      // console.log("[response] line 47", response)
      console.log("[response.data] line 48", response.data.list)
    })

    axios(urlWeatherCurrent).then((response) => {
      const data = response.data
      setweatherCurrent(data)
    })
  }, [])

  //tesst map 
  const [coordinates, setCoordinates] = useState({lat: 0, lng: 0})



  if (isSignin) {
    const userParse = JSON.parse(user);
    avatar = userParse.avatar
    const { slug } = router.query
    const imgPares = JSON.parse(images)
    const nameplace = JSON.parse(name)
    const countryplace = JSON.parse(country)
    const descriptionPlace = JSON.parse(description)
    const reviews = JSON.parse(reviewsData)
    const allReviews = JSON.parse(AllReviewsData)
    const ratings = JSON.parse(rating)
    
    console.log("[image]", imgPares)


    async function handleCreateReviews() {

      const post = await axios({
        method: 'post',
        url: '/api/createReview',
        data: {
          email: userParse.email,
          slug: slug,
          created_at: Date.now(),
          content: comment,
          avatar: userParse.avatar,
          user: userParse.name
        }
      }).then(location.reload())
    }
    //map box




    return (
      <Fragment>
        <Head>
          <title>K Travel - {nameplace}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/logo.svg" />
          <link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />
        </Head>
        <Header isSignin={isSignin} avatar={userParse.avatar} />


        <div className="h-screen w-screen flex flex-col justify-center items-center "
          style={{
            backgroundImage: `url(${avartarPlace})`,
            backgroundPosition: 'center',
            backgroundSize: 'cover',
          }}

        >
          {/* weather and name city */}
          <div className='h-4/5 w-4/5 grid grid-rows-2 grid-cols-2 mt-10 bg-[#c9f6f788] rounded-lg'>
            {/* Weather current  */}
            <div className='row-span-2 m-10 flex justify-center items-start rounded-2xl'
              style={{
                backgroundImage: `url(${avartarPlace})`,
                backgroundPosition: 'center',
                backgroundSize: 'cover',
              }}
            >

              {weatherCurrent &&
                <div className='flex flex-col  justify-items-stretch items-center w-2/5 px-8 pb-8 pt-4 mt-6 rounded-lg bg-[#17496fbf] justify-self-center animate__animated animate__fadeInDown '>
                  <div className='w-full border-[1px] mb-2'></div>
                  <div className='flex flex-row justify-between items-start w-full'>
                    <div className='text-white flex flex-col justify-start items-baseline '>
                      {weatherCurrent.main && <p className='text-white text-[12px]'>{Math.round(weatherCurrent.main.temp_max - 273, 15)}&deg;C/{Math.round(weatherCurrent.main.temp_min - 273, 15)}&deg;C</p>}
                      <p className='text-[12px] flex flex-row justify-center items-center'> <WiHumidity />88% </p>
                    </div>

                    <span className='flex flex-col justify-start items-center ml-10'>
                      {weatherCurrent.weather && <Image src={`http://openweathermap.org/img/wn/${weatherCurrent.weather["0"].icon}@2x.png`} alt="" width="50" height="50" />}
                      {weatherCurrent.weather && <p className='text-xs text-white'>{weatherCurrent.weather["0"].main}</p>}
                    </span>
                  </div>

                  {weatherCurrent.main && <p className='text-5xl pb-5 pt-2 font-bold text-white'>{Math.round(weatherCurrent.main.temp - 273, 15)}&deg;C</p>}


                  <div className='flex flex-row justify-between w-full text-white'>
                    <span className=' flex flex-col justify-center'><WiSunrise /> <p className='text-[12px]'> 05:30 AM </p></span>
                    <span className=' flex flex-col justify-center'><WiSunset />  <p className='text-[12px]'> 05:45 PM </p></span>
                  </div>
                </div>
              }

            </div>
            {/* name city */}
            <div className='flex flex-col items-start justify-center justify-self-start self-center border-l-[30px] pl-5 bg-[#7b4195a7] w-full h-2/3 animate__animated animate__fadeInRight'>
              <h1 className='text-5xl font-bold text-white'>{nameplace}</h1>
              <h2 className='text-3xl font-bold text-gray-300 mt-4'>{countryplace}</h2>
            </div>

            {/* Description */}
            <div className='p-5 rounded-2xl text-[18px] overflow-x-visible w-11/12 h-4/5 justify-self-start self-start animate__animated animate__fadeInUp'>

              <p className=' break-words text-justify'><span className='font-bold'>Description:</span><span className='text-slate-800'> {descriptionPlace}</span></p>

            </div>
            {/*Weather forecast 5 day  */}


            {/* grid grid-cols-5 gap-4 */}
            {/* <div className='grid gap-4 grid-cols-5 mt-10 px-10 py-10 justify-self-center col-span-2 w-full overflow-x-hidden overflow-x-scroll'> */}

            {/* {console.log("[line 141 ]", weather.list)} */}

            {/* {weather.map((item, index) => { */}
            {/* const date = new Date(item.dt * 1000) */}
            {/* return <WeatherCard key={index} weather={item} /> */}
            {/* })} */}
            {/* </div> */}

            {/* {weather && <div className='col-span-2'>
              {weather.list.map(item => {
                return 
                  <div className=''>
                    item.
                  </div>
              })}
            </div>} */}
          </div>

        </div>

        {/* Weather */}
        <div className='w-screen flex flex-col items-center mb-4 '>
          <h1 className="mt-10 text-center text-3xl font-bold text-gray-600 w-full group-hover:text-gray-800 group-hover:underline group-hover:underline-offset-4 cursor-pointer">Weather Forecast</h1>
          <div className="text-center h-1 w-1/5 bg-gray-800 mt-2 group-hover:bg-transparent" />
        </div>

        {/* Du bao thoi tiet trong vong 5 ngay toi */}
        <div className='h-screen w-screen flex justify-center rounded-2xl '>
          <div className='h-[80%] w-[70%] rounded-2xl grid gap-4 grid-cols-4 mt-6 px-10 py-10 justify-self-center col-span-2 bg-[#c9f6f788] w-full overflow-x-hidden overflow-x-scroll'>
            {weather.map((item, index) => {
              const date = new Date(item.dt * 1000)
              return <WeatherCard key={index} weather={item} />
            })}
          </div>
        </div>


        {/* Photos of place */}
        <div className='w-screen flex flex-col items-center mb-10'>
          <h1 className="mt-10 text-center text-3xl font-bold text-gray-600 w-full group-hover:text-gray-800 group-hover:underline group-hover:underline-offset-4 cursor-pointer">Photos</h1>
          <div className="text-center h-1 w-1/5 bg-gray-800 mt-2 group-hover:bg-transparent" />
        </div>
        <div className='grid grid-cols-3 gap-2 p-8 mt-4 m-6 h-screen  overflow-y-scroll'>
          {imgPares.map(img => {
            return (
              <Image className="rounded-xl hover:scale-150 justify-self-center" key={img.id} src={img.url} width="300" height="300" alt="" />
            )
          })}
        </div>

        {/* Map */}


        {/* Comment or Review */}
        <div className='w-screen flex flex-col justify-center items-center'>
          {/* All review */}
          <div className='flex flex-col w-[80%] p-5'>
            <div className='flex flex-row justify-start items-center col-span-2 justify-self-start self-start mb-5'>
              <p className='font-bold mr-2 text-[24px]'>Rating</p>
              <span className='text-[yellow] text-[20px]'><BsFillStarFill /></span>
              <p className='text-[20px] font-bold'>{ratings}</p>
            </div>
            <p className='font-bold text-[20px] mb-5'>All Reviews</p>

            <div className='w-[100%] p-5 grid grid-cols-2 gap-4 rounded-2xl'>
              {allReviews.map((item) => {
                return <AllReviewsCard
                  key={item._id}
                  name={item.user}
                  date={item.created_at}
                  avatar={item.avatar}
                  content={item.content}
                />
              })}
            </div>

          </div>


          {/* Your review */}
          <div className='w-[80%] p-5  grid gap-4' >
            <p className='font-bold text-[20px] mb-5'>Your Reviews</p>
            {/* Card review */}
            {reviews.map((item) => {
              return <CardReviews
                key={item._id}
                name={item.user}
                date={item.created_at}
                avatar={item.avatar}
                content={item.content}
              />
            })}


          </div>

          <div className='w-screen flex flex-col justify-between items-start pl-44 mt-10 mb-10'>
            <textarea onChange={(e) => { setComment(e.target.value) }} id="w3review" name="w3review" rows="4" cols="100" className='border-2 rounded-xl p-1' >
              Create your experience...
            </textarea>
            <button onClick={handleCreateReviews} className='bg-[#336ae1] mt-5 py-2 px-4 rounded-xl text-white font-bold hover:bg-[#648add] cursor-pointer'>Review</button>
          </div>
        </div>
        {/* Create comment or review of user */}
        {/* <div className='w-screen h-screen'>

          {/* <Map setCoordinates = {setCoordinates}   coordinates = {coordinates}    /> */}
        {/* </div> */} 

        <Footer />
      </Fragment>
    )
  }
  else
    return (
      <Fragment>
        <Header isSignin={isSignin} />
        <div className='flex flex-col items-center justify-center w-screen h-screen text-center'
          style={{
            backgroundImage: "url(/2774351.jpg)",
            backgroundPosition: 'center',
            backgroundSize: 'cover',
          }}>
          <div className='flex flex-col items-center justify-center w-1/4 h-80 bg-[#ebdeded2] rounded-xl'>
            <div className='text-3xl mb-5 font-bold text-[#2e4579]'>You are not Sign In</div>
            <Link href='/login' className=' rounded-xl bg-[#dc6060] w-5/6 p-2 hover:bg-[#f33a3ac0] text-white hover:text-[#fffffff2]'>Click here and Go to login &gt</Link>
          </div>
        </div>
        <Footer />
      </Fragment>
    )
}

export default Detail

export async function getServerSideProps(context) {
  const req = context.req
  const res = context.res

  console.log("[param]", context.params.slug)
  //get slug
  const slug = context.params.slug

  //connect to database
  const client = await clientPromise
  const db = client.db('travel-to-share')
  //get array place
  const places = await db.collection('Place').find({ slug: slug }).toArray()

  const arrImg = places[0].img
  const avartarPlace = JSON.stringify(places[0].avatarPlace)
  const name = JSON.stringify(places[0].name)
  const lon = JSON.stringify(places[0].lon)
  const lat = JSON.stringify(places[0].lat)
  const rating = JSON.stringify(places[0].rating)


  console.log("[name place]", name)
  const country = JSON.stringify(places[0].country)
  const description = JSON.stringify(places[0].description)

  const images = JSON.stringify(arrImg)




  //check cookie
  const token = getCookie('KDV', { req, res })
  let isSignin = false
  if (token) {
    let decode = jwt.verify(token, process.env.JWT_SECRET_KEY);
    const email = decode.email

    const users = await db.collection('User').find({ email: email }).toArray()
    const user = JSON.stringify(users[0])
    console.log("[user]", user)
    isSignin = true

    //get review of user
    const reviews = await db.collection('Reviews').find({ email: users[0].email, slug: slug }).toArray()
    const reviewsData = JSON.stringify(reviews)

    //get all review
    const allReviews = await db.collection('Reviews').find({ slug: slug}).toArray()
    const AllReviewsData = JSON.stringify(allReviews)

    return {
      props: { images, isSignin, user, avartarPlace, name, country, description, lat, lon, rating, slug, reviewsData, AllReviewsData }, // will be passed to the page component as props
    }
  }

  return {
    props: { isSignin, images, avartarPlace, name, country }
  }

}